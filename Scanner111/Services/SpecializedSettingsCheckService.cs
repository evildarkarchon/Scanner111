using Scanner111.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace Scanner111.Services
{
    /// <summary>
    /// Service for checking specialized settings in crash logs
    /// Handles BuffOut settings, memory management, archive limits, and LooksMenu settings
    /// </summary>
    public class SpecializedSettingsCheckService
    {
        private readonly AppSettings _appSettings;
        private readonly IYamlSettingsCacheService _yamlSettingsCache;

        public SpecializedSettingsCheckService(
            AppSettings appSettings,
            IYamlSettingsCacheService yamlSettingsCache)
        {
            _appSettings = appSettings;
            _yamlSettingsCache = yamlSettingsCache;
        }

        /// <summary>
        /// Main method to check all specialized settings in the crash log
        /// </summary>
        public void CheckAllSettings(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            if (parsedLog == null) return;

            // Only perform these checks if the log was generated by Buffout 4
            bool isBuffoutLog = IsBuffoutCrashLog(parsedLog);

            if (isBuffoutLog)
            {
                CheckBuffoutAchievementSettings(parsedLog, issues);
                CheckMemorySettings(parsedLog, issues);
                CheckArchiveLimitSettings(parsedLog, issues);
                CheckLooksMenuSettings(parsedLog, issues);
                CheckF4SEIntegrity(parsedLog, issues);

                // Add any other Buffout-specific checks here
            }
        }

        /// <summary>
        /// Determines if the crash log was generated by Buffout 4
        /// </summary>
        private bool IsBuffoutCrashLog(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.CrashGeneratorName == null)
                return false;

            return parsedLog.CrashGeneratorName.Contains("Buffout", StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Check if Buffout achievements settings are configured properly
        /// </summary>
        private void CheckBuffoutAchievementSettings(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            bool achievementModDetected = DetectAchievementMods(parsedLog);
            bool achievementsEnabled = DetectBuffoutAchievementsEnabled(parsedLog);

            // If achievement mods are installed but Buffout achievements are enabled, that's a problem
            if (achievementModDetected && achievementsEnabled)
            {
                // Try to get the warning text from the database
                string warningText = GetWarningText("Warnings_CRASHGEN", "Warn_TOML_Achievements") ??
                    "Achievements mods detected, but Buffout 4's Achievements parameter is set to TRUE. This can cause conflicts.";

                issues.Add(new LogIssue
                {
                    FileName = Path.GetFileName(parsedLog.FilePath),
                    IssueId = "BuffoutSettings_Achievements",
                    Title = "Buffout 4 Achievement Settings Conflict",
                    Message = warningText,
                    Recommendation = "Set Achievements=false in Buffout4.toml, since you're using another achievements mod.",
                    Severity = SeverityLevel.Warning,
                    Source = "BuffoutSettingsCheck"
                });
            }
        }

        /// <summary>
        /// Check if memory management settings are configured properly
        /// </summary>
        private void CheckMemorySettings(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            bool bakaScrapHeapDetected = DetectBakaScrapHeap(parsedLog);
            bool memoryManagerEnabled = DetectMemoryManagerEnabled(parsedLog);

            // If BakaScrapHeap is installed but Buffout's MemoryManager is enabled, that's a problem
            if (bakaScrapHeapDetected && memoryManagerEnabled)
            {
                // Try to get the warning text from the database
                string warningText = GetWarningText("Warnings_CRASHGEN", "Warn_TOML__Memory") ??
                    "BakaScrapHeap detected, but Buffout 4's MemoryManager parameter is set to TRUE. This can cause conflicts.";

                issues.Add(new LogIssue
                {
                    FileName = Path.GetFileName(parsedLog.FilePath),
                    IssueId = "BuffoutSettings_Memory",
                    Title = "Buffout 4 Memory Settings Conflict",
                    Message = warningText,
                    Recommendation = "Set MemoryManager=false in Buffout4.toml when using BakaScrapHeap.",
                    Severity = SeverityLevel.Warning,
                    Source = "BuffoutSettingsCheck"
                });
            }
        }

        /// <summary>
        /// Check archive limit settings for potential issues
        /// </summary>
        private void CheckArchiveLimitSettings(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            // Check if there are signs of archive limit issues in the crash log
            bool archiveLimitIssue = DetectArchiveLimitIssues(parsedLog);

            if (archiveLimitIssue)
            {
                issues.Add(new LogIssue
                {
                    FileName = Path.GetFileName(parsedLog.FilePath),
                    IssueId = "BuffoutSettings_ArchiveLimit",
                    Title = "Archive Limit Reached",
                    Message = "Signs of archive limit issues detected in the crash log.",
                    Recommendation = "You may need to increase archive limit settings in Fallout4Custom.ini or install an archive limit fix mod.",
                    Severity = SeverityLevel.Error,
                    Source = "ArchiveLimitCheck"
                });
            }
        }

        /// <summary>
        /// Check LooksMenu settings for compatibility with Buffout 4
        /// </summary>
        private void CheckLooksMenuSettings(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            bool looksMenuDetected = DetectLooksMenu(parsedLog);
            bool f4eeEnabled = DetectF4EEEnabled(parsedLog);

            // If LooksMenu is installed but F4EE compatibility is disabled, that's a problem
            if (looksMenuDetected && !f4eeEnabled)
            {
                // Try to get the warning text from the database
                string warningText = GetWarningText("Warnings_CRASHGEN", "Warn_TOML__F4EE") ??
                    "LooksMenu detected, but Buffout 4's F4EE parameter under [Compatibility] is set to FALSE.";

                issues.Add(new LogIssue
                {
                    FileName = Path.GetFileName(parsedLog.FilePath),
                    IssueId = "BuffoutSettings_LooksMenu",
                    Title = "Buffout 4 LooksMenu Compatibility Issue",
                    Message = warningText,
                    Recommendation = "Set F4EE=true in the [Compatibility] section of Buffout4.toml.",
                    Severity = SeverityLevel.Warning,
                    Source = "BuffoutSettingsCheck"
                });
            }
        }

        /// <summary>
        /// Check F4SE integrity based on crash log information
        /// </summary>
        private void CheckF4SEIntegrity(ParsedCrashLog parsedLog, List<LogIssue> issues)
        {
            // Get the installed F4SE version
            string? f4seVersion = GetF4SEVersionFromLog(parsedLog);

            if (string.IsNullOrEmpty(f4seVersion))
                return; // No F4SE information found

            // Get the latest F4SE version from settings
            string latestF4SEVersion = _appSettings.XSELatestVersion ?? "0.6.23"; // Default value from YAML

            // Compare versions
            if (!f4seVersion.Equals(latestF4SEVersion, StringComparison.OrdinalIgnoreCase))
            {
                // Try to get the warning text from the database
                string warningText = GetWarningText("Warnings_XSE", "Warn_Outdated") ??
                    "Your F4SE version might be out of date. Please update F4SE if necessary.";

                issues.Add(new LogIssue
                {
                    FileName = Path.GetFileName(parsedLog.FilePath),
                    IssueId = "F4SE_Outdated",
                    Title = "F4SE Version Check",
                    Message = $"Installed F4SE version: {f4seVersion}, Latest version: {latestF4SEVersion}. {warningText}",
                    Recommendation = "Download the latest F4SE version from https://f4se.silverlock.org/",
                    Severity = SeverityLevel.Warning,
                    Source = "F4SECheck"
                });
            }
        }

        #region Detection Methods

        private bool DetectAchievementMods(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.LoadedPlugins == null)
                return false;

            // List of known achievement mod patterns
            var achievementModPatterns = new[]
            {
                "Achievement",
                "Achievements",
                "UnlimitedSurvival"
            };

            return parsedLog.LoadedPlugins.Keys.Any(plugin =>
                achievementModPatterns.Any(pattern =>
                    plugin.Contains(pattern, StringComparison.OrdinalIgnoreCase)));
        }

        private bool DetectBuffoutAchievementsEnabled(ParsedCrashLog parsedLog)
        {
            // This would typically check the [General] section in the Buffout4.toml
            // Since we don't have direct access to that file in the crash log, we're looking for hints

            if (parsedLog?.OtherSegments == null)
                return true; // Default to true if we can't determine

            // Look for Buffout 4 configuration in the log
            if (parsedLog.OtherSegments.TryGetValue("Buffout 4", out var buffoutSection))
            {
                foreach (var line in buffoutSection)
                {
                    if (line.Contains("Achievements=", StringComparison.OrdinalIgnoreCase))
                    {
                        return line.Contains("true", StringComparison.OrdinalIgnoreCase);
                    }
                }
            }

            return true; // Default to true if we couldn't find the setting
        }

        private bool DetectBakaScrapHeap(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.LoadedPlugins == null)
                return false;

            // Check if the BakaScrapHeap.dll is loaded
            return parsedLog.LoadedPlugins.Keys.Any(plugin =>
                plugin.Contains("BakaScrapHeap", StringComparison.OrdinalIgnoreCase));
        }

        private bool DetectMemoryManagerEnabled(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.OtherSegments == null)
                return true; // Default to true if we can't determine

            // Look for Buffout 4 configuration in the log
            if (parsedLog.OtherSegments.TryGetValue("Buffout 4", out var buffoutSection))
            {
                foreach (var line in buffoutSection)
                {
                    if (line.Contains("MemoryManager=", StringComparison.OrdinalIgnoreCase))
                    {
                        return line.Contains("true", StringComparison.OrdinalIgnoreCase);
                    }
                }
            }

            return true; // Default to true if we couldn't find the setting
        }

        private bool DetectArchiveLimitIssues(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.CallStack == null)
                return false;

            // Look for specific patterns in the call stack that indicate archive limit issues
            var archiveLimitPatterns = new[]
            {
                "BA2",
                "Archive",
                "LooseFileAsyncStream"
            };

            int matchCount = parsedLog.CallStack.Count(line =>
                archiveLimitPatterns.Any(pattern =>
                    line.Contains(pattern, StringComparison.OrdinalIgnoreCase)));

            // If we find multiple matches, it's more likely to be an archive limit issue
            return matchCount >= 3;
        }

        private bool DetectLooksMenu(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.LoadedPlugins == null)
                return false;

            // Check for LooksMenu plugins
            var looksMenuPatterns = new[]
            {
                "LooksMenu",
                "LooksMen",
                "F4EE"
            };

            return parsedLog.LoadedPlugins.Keys.Any(plugin =>
                looksMenuPatterns.Any(pattern =>
                    plugin.Contains(pattern, StringComparison.OrdinalIgnoreCase)));
        }

        private bool DetectF4EEEnabled(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.OtherSegments == null)
                return false; // Default to false if we can't determine

            // Look for Buffout 4 configuration in the log
            if (parsedLog.OtherSegments.TryGetValue("Buffout 4", out var buffoutSection))
            {
                foreach (var line in buffoutSection)
                {
                    if (line.Contains("[Compatibility]", StringComparison.OrdinalIgnoreCase))
                    {
                        // Found the compatibility section, now look for F4EE setting
                        continue;
                    }

                    if (line.Contains("F4EE=", StringComparison.OrdinalIgnoreCase))
                    {
                        return line.Contains("true", StringComparison.OrdinalIgnoreCase);
                    }
                }
            }

            return false; // Default to false if we couldn't find the setting
        }

        private string? GetF4SEVersionFromLog(ParsedCrashLog parsedLog)
        {
            if (parsedLog?.OtherSegments == null)
                return null;

            // Try to find F4SE information in the log
            foreach (var segment in parsedLog.OtherSegments)
            {
                foreach (var line in segment.Value)
                {
                    if (line.Contains("F4SE version", StringComparison.OrdinalIgnoreCase))
                    {
                        // Extract version number
                        var match = Regex.Match(line, @"F4SE version (\d+\.\d+\.\d+)");
                        if (match.Success)
                        {
                            return match.Groups[1].Value;
                        }
                    }
                }
            }
            return null;
        }

        #endregion

        #region Utility Methods

        private string? GetWarningText(string section, string key)
        {
            try
            {
                // Use the GetSetting method from the interface
                return _yamlSettingsCache.GetSetting<string>(YAML.Game, $"{section}.{key}");
            }
            catch (Exception)
            {
                // Silently fail and return null
            }

            return null;
        }

        #endregion
    }
}
