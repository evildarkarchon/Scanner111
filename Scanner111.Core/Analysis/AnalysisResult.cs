using Scanner111.Core.Reporting;

namespace Scanner111.Core.Analysis;

/// <summary>
///     Represents the result of an analysis operation.
/// </summary>
public sealed class AnalysisResult
{
    private readonly List<string> _errors;
    private readonly Dictionary<string, object> _metadata;
    private readonly List<string> _warnings;

    public AnalysisResult(string analyzerName)
    {
        AnalyzerName = analyzerName ?? throw new ArgumentNullException(nameof(analyzerName));
        _errors = new List<string>();
        _warnings = new List<string>();
        _metadata = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        CompletedAt = DateTime.UtcNow;
    }

    /// <summary>
    ///     Gets the name of the analyzer that produced this result.
    /// </summary>
    public string AnalyzerName { get; }

    /// <summary>
    ///     Gets whether the analysis completed successfully.
    /// </summary>
    public bool Success { get; init; }

    /// <summary>
    ///     Gets the report fragment generated by the analysis.
    /// </summary>
    public ReportFragment? Fragment { get; init; }

    /// <summary>
    ///     Gets the severity level of any issues found.
    /// </summary>
    public AnalysisSeverity Severity { get; init; } = AnalysisSeverity.None;

    /// <summary>
    ///     Gets the errors encountered during analysis.
    /// </summary>
    public IReadOnlyList<string> Errors => _errors.AsReadOnly();

    /// <summary>
    ///     Gets the warnings generated during analysis.
    /// </summary>
    public IReadOnlyList<string> Warnings => _warnings.AsReadOnly();

    /// <summary>
    ///     Gets additional metadata from the analysis.
    /// </summary>
    public IReadOnlyDictionary<string, object> Metadata => _metadata;

    /// <summary>
    ///     Gets the time when the analysis completed.
    /// </summary>
    public DateTime CompletedAt { get; }

    /// <summary>
    ///     Gets the duration of the analysis if tracked.
    /// </summary>
    public TimeSpan? Duration { get; init; }

    /// <summary>
    ///     Gets whether this result should skip further processing.
    /// </summary>
    public bool SkipFurtherProcessing { get; init; }

    /// <summary>
    ///     Adds an error message to the result.
    /// </summary>
    public void AddError(string error)
    {
        if (!string.IsNullOrWhiteSpace(error))
            _errors.Add(error);
    }

    /// <summary>
    ///     Adds multiple error messages to the result.
    /// </summary>
    public void AddErrors(IEnumerable<string> errors)
    {
        if (errors != null)
            _errors.AddRange(errors);
    }

    /// <summary>
    ///     Adds a warning message to the result.
    /// </summary>
    public void AddWarning(string warning)
    {
        if (!string.IsNullOrWhiteSpace(warning))
            _warnings.Add(warning);
    }

    /// <summary>
    ///     Adds metadata to the result.
    /// </summary>
    public void AddMetadata(string key, object value)
    {
        if (!string.IsNullOrWhiteSpace(key))
            _metadata[key] = value;
    }

    /// <summary>
    ///     Creates a successful result with a report fragment.
    /// </summary>
    public static AnalysisResult CreateSuccess(string analyzerName, ReportFragment fragment, TimeSpan? duration = null)
    {
        return new AnalysisResult(analyzerName)
        {
            Success = true,
            Fragment = fragment,
            Severity = AnalysisSeverity.None,
            Duration = duration
        };
    }

    /// <summary>
    ///     Creates a failed result with error information.
    /// </summary>
    public static AnalysisResult CreateFailure(string analyzerName, string error, TimeSpan? duration = null)
    {
        var result = new AnalysisResult(analyzerName)
        {
            Success = false,
            Severity = AnalysisSeverity.Error,
            Duration = duration
        };
        result.AddError(error);
        return result;
    }

    /// <summary>
    ///     Creates a skipped result when analysis cannot proceed.
    /// </summary>
    public static AnalysisResult CreateSkipped(string analyzerName, string reason)
    {
        var result = new AnalysisResult(analyzerName)
        {
            Success = true,
            SkipFurtherProcessing = false,
            Severity = AnalysisSeverity.None
        };
        result.AddWarning($"Analysis skipped: {reason}");
        return result;
    }
}

/// <summary>
///     Indicates the severity level of analysis findings.
/// </summary>
public enum AnalysisSeverity
{
    /// <summary>
    ///     No issues found.
    /// </summary>
    None = 0,

    /// <summary>
    ///     Informational findings only.
    /// </summary>
    Info = 1,

    /// <summary>
    ///     Warnings that should be addressed.
    /// </summary>
    Warning = 2,

    /// <summary>
    ///     Errors that need immediate attention.
    /// </summary>
    Error = 3,

    /// <summary>
    ///     Critical issues that prevent operation.
    /// </summary>
    Critical = 4
}