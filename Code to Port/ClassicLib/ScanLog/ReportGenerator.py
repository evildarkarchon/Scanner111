"""
Report generator module for CLASSIC.

This module handles report generation and formatting including:
- Creating report headers
- Formatting error sections
- Generating plugin suspect sections
- Formatting FormID sections
- Creating named record sections
- Generating settings validation results
- Creating report footers
"""

from typing import TYPE_CHECKING, Any

from ClassicLib import GlobalRegistry
from ClassicLib.ScanLog.ScanLogInfo import ClassicScanLogsInfo
from ClassicLib.Util import append_or_extend

if TYPE_CHECKING:
    from ClassicLib.ScanLog.ScanLogInfo import ClassicScanLogsInfo


class ReportGenerator:
    """Handles report generation and formatting for crash log analysis."""

    def __init__(self, yamldata: "ClassicScanLogsInfo") -> None:
        """
        Initialize the report generator.

        Args:
            yamldata: Configuration data
        """
        self.yamldata: ClassicScanLogsInfo = yamldata

    def generate_header(self, crashlog_filename: str, autoscan_report: list[str]) -> None:
        """
        Generates a standardized header for an autoscan report and appends it
        to the provided report list. The header includes details about the
        crashlog filename, the generator version, and important viewing and
        reading instructions.

        Parameters:
            crashlog_filename: str
                The name of the crash log file being processed.
            autoscan_report: list[str]
                The list to which the generated header will be appended.

        Returns:
            None
        """
        append_or_extend(
            (
                f"{crashlog_filename} -> AUTOSCAN REPORT GENERATED BY {self.yamldata.classic_version} \n",
                "# FOR BEST VIEWING EXPERIENCE OPEN THIS FILE IN NOTEPAD++ OR SIMILAR # \n",
                "# PLEASE READ EVERYTHING CAREFULLY AND BEWARE OF FALSE POSITIVES # \n",
                "====================================================\n",
            ),
            autoscan_report,
        )

    def generate_error_section(  # noqa: PLR0913
        self,
        main_error: str,
        crashgen_version: str,
        version_current: Any,
        version_latest: Any,
        version_latest_vr: Any,
        autoscan_report: list[str],
    ) -> None:
        """
        Generates and appends an error section to the autoscan report based on the provided error
        data, versions, and warnings. This method is responsible for displaying error information
        related to the `crashgen` component, including the detected version, outdated warnings,
        and version comparison logic.

        Parameters:
        main_error: str
            The main error message to be displayed in the report.
        crashgen_version: str
            The version string of the crashgen component as detected by the system.
        version_current: Any
            The current version of the crashgen being analyzed.
        version_latest: Any
            The latest available version of the crashgen from the official source.
        version_latest_vr: Any
            The latest available version of the crashgen with VR-specific updates.
        autoscan_report: list[str]
            The list to which the error information and warnings will be appended.

        Returns:
        None
        """
        append_or_extend(
            (
                f"\nMain Error: {main_error}\n",
                f"Detected {self.yamldata.crashgen_name} Version: {crashgen_version} \n",
                (
                    f"* You have the latest version of {self.yamldata.crashgen_name}! *\n\n"
                    if version_current >= version_latest or version_current >= version_latest_vr
                    else f"{self.yamldata.warn_outdated} \n"
                ),
            ),
            autoscan_report,
        )

    @staticmethod
    def generate_suspect_section_header(autoscan_report: list[str]) -> None:
        """
        Generates a suspect section header for the autoscan report.

        This method appends or extends a predefined header to the provided
        autoscan report list. The header is used to indicate the beginning
        of a section where the system will analyze and check if any known crash
        suspects match the log data.

        Args:
            autoscan_report (list[str]): A list representing the autoscan report
                where the suspect section header will be added.

        Returns:
            None
        """
        append_or_extend(
            (
                "====================================================\n",
                "CHECKING IF LOG MATCHES ANY KNOWN CRASH SUSPECTS...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )

    @staticmethod
    def generate_suspect_found_footer(found_suspect: bool, autoscan_report: list[str]) -> None:
        """
        Generate a footer message for crash suspect analysis and append it to the autoscan report.

        Depending on whether a crash suspect was found or not, this method appends a specific
        message to the provided autoscan report list. The appended message includes information
        or guidance regarding crash suspects.

        Parameters:
            found_suspect: bool
                Indicates whether a crash suspect has been found.
            autoscan_report: list[str]
                The list to which the footer message will be appended or extended.

        Returns:
            None
        """
        if found_suspect:
            append_or_extend(
                (
                    "* FOR DETAILED DESCRIPTIONS AND POSSIBLE SOLUTIONS TO ANY ABOVE DETECTED CRASH SUSPECTS *\n",
                    "* SEE: https://docs.google.com/document/d/17FzeIMJ256xE85XdjoPvv_Zi3C5uHeSTQh6wOZugs4c *\n\n",
                ),
                autoscan_report,
            )
        else:
            append_or_extend(
                (
                    "# FOUND NO CRASH ERRORS / SUSPECTS THAT MATCH THE CURRENT DATABASE #\n",
                    "Check below for mods that can cause frequent crashes and other problems.\n\n",
                ),
                autoscan_report,
            )

    @staticmethod
    def generate_settings_section_header(autoscan_report: list[str]) -> None:
        """
        Generate a header for the settings section of the report.

        This method appends a predefined header to a given list, which represents
        the report for the autoscan process. The header indicates the beginning
        of the section that verifies the correctness of necessary files and settings.

        Args:
            autoscan_report (list[str]): A list representing the autoscan report to which
                the header will be appended.

        Returns:
            None
        """
        append_or_extend(
            (
                "====================================================\n",
                "CHECKING IF NECESSARY FILES/SETTINGS ARE CORRECT...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )

    @staticmethod
    def generate_mod_check_header(check_type: str, autoscan_report: list[str]) -> None:
        """
        Generates a header for a modification check and appends or extends it in the
        autoscan report list. The header includes delimiters and a message specifying
        the type of check being performed.

        Args:
            check_type: Specifies the type of modification check being performed.
            autoscan_report: A list where the generated header will be appended or
                extended. The list is expected to contain string elements.

        Returns:
            None
        """
        append_or_extend(
            (
                "====================================================\n",
                f"CHECKING FOR MODS THAT {check_type}...\n",
                "====================================================\n",
            ),
            autoscan_report,
        )

    @staticmethod
    def generate_plugin_suspect_header(autoscan_report: list[str]) -> None:
        """
        Generate a header for a plugin suspect list and append or extend it to the provided autoscan report.

        This method creates a formatted header indicating the beginning of a scan for specific
        potential plugin suspects. The generated header is appended or extended to the given
        autoscan report list.

        Args:
            autoscan_report (list[str]): The list where the plugin suspect header will be added.

        Returns:
            None
        """
        append_or_extend(
            (
                "====================================================\n",
                "SCANNING THE LOG FOR SPECIFIC (POSSIBLE) SUSPECTS...\n",
                "====================================================\n",
                "# LIST OF (POSSIBLE) PLUGIN SUSPECTS #\n",
            ),
            autoscan_report,
        )

    @staticmethod
    def generate_formid_section_header(autoscan_report: list[str]) -> None:
        """
        Generates and appends a section header for form ID suspects to the autoscan report.

        This method inserts a predefined header indicating the list of possible form ID suspects
        into the provided autoscan report. The header is appended or extended to the report
        based on the functionality of the helper function.

        Parameters:
            autoscan_report (list[str]): A list containing strings that represent the autoscan
            report. The section header will be added to this list.

        Returns:
            None
        """
        append_or_extend(("\n# LIST OF (POSSIBLE) FORM ID SUSPECTS #\n",), autoscan_report)

    @staticmethod
    def generate_record_section_header(autoscan_report: list[str]) -> None:
        """
        Generates a header section for detected named records and appends or extends it to the
        provided autoscan report list.

        Args:
            autoscan_report (list[str]): The list where the header section will be appended
            or extended.

        Returns:
            None
        """
        append_or_extend(("\n# LIST OF DETECTED (NAMED) RECORDS #\n",), autoscan_report)

    def generate_footer(self, autoscan_report: list[str]) -> None:
        """
        Generates and appends or extends footer text to the autoscan report.

        This method generates a footer text specific to the current game and appends
        or extends the provided autoscan report with the generated footer. If the
        game is "Fallout4," it uses a specific footer text. Otherwise, it adds classic
        version and date information followed by a concluding note.

        Parameters:
        autoscan_report (list[str]): A list of strings representing the autoscan
        report to which the footer text will be appended or extended.

        Returns:
        None
        """
        if GlobalRegistry.get_game().replace(" ", "") == "Fallout4":
            append_or_extend(self.yamldata.autoscan_text, autoscan_report)
        append_or_extend(f"{self.yamldata.classic_version} | {self.yamldata.classic_version_date} | END OF AUTOSCAN \n", autoscan_report)

    @staticmethod
    def generate_plugin_limit_warning(
        trigger_plugin_limit: bool, trigger_limit_check_disabled: bool, trigger_plugins_loaded: bool, autoscan_report: list[str]
    ) -> None:
        """
        Provides a utility method to generate warnings related to plugin limit conditions during an autoscan process.

        This method evaluates the state of plugin limit-related flags and appends appropriate warnings to the autoscan
        report based on the trigger conditions provided.

        Args:
            trigger_plugin_limit (bool): Indicates whether the plugin limit condition has been reached.
            trigger_limit_check_disabled (bool): Indicates whether the plugin limit check is disabled.
            trigger_plugins_loaded (bool): Indicates whether plugins have been successfully loaded.
            autoscan_report (list[str]): A list capturing messages or warnings to be included in the autoscan report.

        Returns:
            None
        """
        if trigger_plugin_limit and not trigger_limit_check_disabled and trigger_plugins_loaded:
            append_or_extend(
                ("# 💀 CRITICAL : THE '[FF]' PLUGIN PREFIX MEANS YOU REACHED THE PLUGIN LIMIT OF 254 PLUGINS # \n",), autoscan_report
            )
        elif trigger_plugin_limit and trigger_limit_check_disabled and trigger_plugins_loaded:
            append_or_extend(
                (
                    "# ⚠️ WARNING : THE '[FF]' PLUGIN PREFIX WAS DETECTED BUT PLUGIN LIMIT CHECK IS DISABLED. # \n",
                    "This could indicates that your version of Buffout 4 NG is out of date. \n",
                    "Recommendation: Consider updating Buffout 4 NG to the latest version. \n-----\n",
                ),
                autoscan_report,
            )

    @staticmethod
    def generate_plugins_loading_failure_message() -> tuple[str, ...]:
        """
        Generates a message tuple indicating failure to load the plugin list for a
        crash log. This message informs the user about the inability to proceed with
        a full scan and provides alternative actions that can be taken.

        Returns:
            tuple[str, ...]: A tuple containing multiple lines of failure warning
            and guidance messages.
        """
        return (
            "* [!] NOTICE : BUFFOUT 4 WAS NOT ABLE TO LOAD THE PLUGIN LIST FOR THIS CRASH LOG! *\n",
            "  CLASSIC cannot perform the full scan. Provide or scan a different crash log\n",
            "  OR copy-paste your *loadorder.txt* into your main CLASSIC folder.\n",
        )
